<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sarchitect echo]]></title>
  <link href="http://mizumoto-da.github.io/atom.xml" rel="self"/>
  <link href="http://mizumoto-da.github.io/"/>
  <updated>2013-12-23T14:02:01+09:00</updated>
  <id>http://mizumoto-da.github.io/</id>
  <author>
    <name><![CDATA[mizumoto-da]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenStack の選択の自由]]></title>
    <link href="http://mizumoto-da.github.io/blog/openstack-option-and-freedom/"/>
    <updated>2013-12-23T02:13:46+09:00</updated>
    <id>http://mizumoto-da.github.io/blog/openstack-option-and-freedom</id>
    <content type="html"><![CDATA[<p>OpenStack の環境を構築します、といったときに皆さんどういう構成を思い浮かべるでしょうか。最近はドキュメントも充実してきているので、標準的なリファレンス構成を組むのであれば、情報には事欠かないかと思います。ですが実際には目的とする用途やコスト、運用モデルに合わせて様々考えられると思います。よいIaaS環境を構築できれば分散しているリソースを組織全体や外部へのサービスとして共有化、集約化することでスピードや生産性を高められます。そうしたOpenStackが持つメリットと組織の目的とをうまくソリューション化できればよいことはわかります。実際に北米を中心に、多くの企業がこれを取り込もうとしています。ではそのためのベストな構成とは何でしょうか。</p>

<p>(OpenStack Advent Calendar 2013 JPにエントリーして書いています。
<a href="https://github.com/irixjp/opstjp-ac/wiki/OpenStack-Advent-Calendar-2013-JP">https://github.com/irixjp/opstjp-ac/wiki/OpenStack-Advent-Calendar-2013-JP</a> )</p>

<p>今現在のOpenStackのユースケースのわかりやすい例としては大手サービスプロバイダのIaaS環境があげられます。ですが今後拡大して行くであろうユースケースをOpenStackが提供して行くには何が必要か。おそらくこれを満たす単一の答えはないのだと思います。ただ一ついえるのは、ユーザ側に様々な選択肢が提供されていれば、課題は解決されて行くのだと思います。</p>

<p>では具体的に、OpenStack の検証環境を構成する最も簡単な方法の一つを紹介します。用意したものはOpenStack Havanaのベース環境として前回記事で紹介したVOVAのオールインワン構成と、nova-compute環境をそれを稼働させるハードウェア環境です:</p>

<ul>
<li>VOVA 0.2.1</li>
<li>仮想化環境: ESXi 5.5.0 (ベース、ネストとも）</li>
<li>nova用環境: vCenter VM 5.5</li>
<li>設定用: Windows7 (vSphere Client)</li>
<li>物理サーバ1台, ネットワーク環境（この環境とOpenStackを利用するユーザの外部ネットワークの位置づけ）</li>
</ul>


<p>前回記事で紹介したURLから、VOVAのOVAファイルをダウンロードしておきます。また、vCenterについても評価版などを使用して今回のベースESXi 5.5にデプロイして、データセンター、クラスタを構成しておきます。今回は下記のように構成しました。</p>

<ul>
<li>vCenter 5.5.0b</li>
<li>VOVA用のESXi (ネスト）</li>
<li>データセンター: VOVA_Testbed</li>
<li>クラスタ: c1, c2 の2つ、それぞれ1つずつESXi（ネストしたもの）を接続しておく</li>
</ul>


<p>基本的には上記の通りですが、ESXi用のネットワーク構成として管理用のネットワーク（VM Network）とOpenStack用のネットワーク（br100, VLAN100）をそれぞれ構成し、ESXiに仮想NICとして接続しておきます。</p>

<p>まず、VOVAのOVAファイルをデプロイします。vCenterにvSphereクライアントからログインし、ダウンロード済みのVOVAを選択します。
<img src="http://mizumoto-da.github.io/images/vova/vova-ovf-deploy.png"></p>

<p>テンプレートに関連情報を入力します。これはOpenStackとvCenterを接続するための情報としてVOVAのVMをデプロイするときに自動的に設定されます。
<img src="http://mizumoto-da.github.io/images/vova/vova-ovf-template.png"></p>

<p>しばらくするとVOVAのデプロイが終わり、VOVA VMのコンソールに下記のようなメッセージが出力されます。この環境では外部接続用のネットワークにDHCPを使用しているため、自動的にOpenStack Dashboard用のIPも割り当てられています。
<img src="http://mizumoto-da.github.io/images/vova/vova-boot-console.png"></p>

<p>DashboardにWebブラウザで接続してみます。</p>

<p><img src="http://mizumoto-da.github.io/images/vova/vova-login.png"></p>

<p>demoユーザでログインできます。ここまででOpenStack + vCenter/vSphereのnova-compute環境の構成が完了しました。</p>

<p>この辺りの操作手順は公式のドキュメントにも記載されていますし、VMwareのハンズオンラボにもOpenStackの操作手順例が示されているので省略します。皆さんが普段目にされている手順とは全く異なるとは思いますが、非常に簡単にOpenStackの検証環境が用意できたのがおわかりいただけると思います。</p>

<p>さらに、computeがどう構成されているかを見てみます。adminユーザで再度Dashboardにログインしてみます。</p>

<p><img src="http://mizumoto-da.github.io/images/vova/vova-dboard-hypervisor.png"></p>

<p>手順の前提で構成していたクラスタc1, c2がきちんと認識されているのが確認できますね。</p>

<p>ここで、クラスタ（vCDriver経由のvCenter上のクラスタのコンピュートノード）へのホストの追加手順ですが、ESXiの初期設定を行ったホストを下記のようなウィザードで追加していました。</p>

<p><img src="http://mizumoto-da.github.io/images/vova/vova-add-host-from-vcenter1.png"></p>

<p><img src="http://mizumoto-da.github.io/images/vova/vova-add-host-from-vcenter2.png"></p>

<p>いかがでしょうか。今後OpenStackのユースケースがエンタープライズ用途に拡大して行けば、KVMや他のコンピュート用ドライバと並んでVMware環境を接続することのイメージはつかんでいただけたかと思います。</p>

<p>最後に上記環境のnova.confについて確認してみます。vCDriverが指定されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@localhost:~# cat /etc/nova/nova.conf 
</span><span class='line'>
</span><span class='line'>[DEFAULT]
</span><span class='line'>flat_interface = eth1
</span><span class='line'>flat_network_bridge = br100
</span><span class='line'>vlan_interface = eth0
</span><span class='line'>public_interface = eth0
</span><span class='line'>network_manager = nova.network.manager.FlatDHCPManager
</span><span class='line'>compute_driver = vmwareapi.VMwareVCDriver
</span><span class='line'>glance_api_servers = 10.35.0.100:9292
</span><span class='line'>-- 中略 --
</span><span class='line'>[vmware]
</span><span class='line'>host_password = vmware
</span><span class='line'>host_username = root
</span><span class='line'>host_ip = 10.35.1.6
</span><span class='line'>#datastore_regex = NOT DEFINED
</span><span class='line'>cluster_name = c1
</span><span class='line'>cluster_name = c2</span></code></pre></td></tr></table></div></figure>


<p>参考: ここで紹介した以外にも、MacOSのFusion上でVOVAを動作させた有志もいるようです。こちらの場合は持ち歩けるOpenStackデモ環境になりますね。
<a href="http://virtualizedgeek.com/2013/12/22/installing-vmwares-openstack-virtual-appliance-in-vmware-fusion-techtalk-video/">http://virtualizedgeek.com/2013/12/22/installing-vmwares-openstack-virtual-appliance-in-vmware-fusion-techtalk-video/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStack VOVA Havana]]></title>
    <link href="http://mizumoto-da.github.io/blog/openstack-vova-havana/"/>
    <updated>2013-12-22T06:20:52+09:00</updated>
    <id>http://mizumoto-da.github.io/blog/openstack-vova-havana</id>
    <content type="html"><![CDATA[<p>OpenStack Havana リリースを使いたい！ということで色々やっているんですが、やはりパッケージに勝るものはない、ということで今回はVOVAです。</p>

<p>11月にHavana版がリリースされてます。主な機能追加は下記です。</p>

<ul>
<li>novaコンピュートノードあたりvCenter配下の複数のクラスタに対応</li>
<li>VMDKドライバ (Cinder)</li>
<li>vSphere Web クライアントのプラグインの追加</li>
<li>vDS(vSphere Distributed Switch: 分散仮想スイッチ</li>
</ul>


<p><img class="right" src="http://blogs.vmware.com/vsphere/files/2013/11/Team-OpenStack-@-VMware-300x220.png"></p>

<p>コミュニティのページはこちらです。</p>

<p><a href="https://communities.vmware.com/community/vmtn/openstack">https://communities.vmware.com/community/vmtn/openstack</a></p>

<p>こちらにあるマニュアルにOVAのイメージのURLが記載されていますので、ダウンロード後インストール対象の環境にデプロイしてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vSphere 5.5 Nested Environment for Lab]]></title>
    <link href="http://mizumoto-da.github.io/blog/vsphere-5-5-nested-environment-for-lab/"/>
    <updated>2013-12-21T05:34:10+09:00</updated>
    <id>http://mizumoto-da.github.io/blog/vsphere-5-5-nested-environment-for-lab</id>
    <content type="html"><![CDATA[<p>最近身の回りでは自宅ラボを構築するというのがはやりになっているようです。機材を調達して自宅IaaS基盤を構築し、思い思いのシステムを作っては壊し、ということでしょう。</p>

<p>そういった基盤を構成する上で書かせないのがハイパーバイザーを使った環境になる訳ですが、ハイパーバイザー自身のシステムを動作させるためには、ある程度のハードウェアリソースが必要になりますし、何よりハイパーバイザー上にハイパーバイザーを動作させるネスト環境が必要になる訳です。</p>

<p>ここではESXi 5.5を使用したネスト環境を構成する方法を示したいと思います。</p>

<p>まず、ベースとなるESXi 5.5をインストールします。これは通常の方法で構いません。</p>

<p>起動後、SSHログインを有効化し、下記の設定ファイルの変更とhostdサービスの再起動を行います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ # vi /etc/vmware/config
</span><span class='line'>
</span><span class='line'>libdir = "/usr/lib/vmware"
</span><span class='line'>authd.proxy.nfc = "vmware-hostd:ha-nfc"
</span><span class='line'>authd.proxy.nfcssl = "vmware-hostd:ha-nfcssl"
</span><span class='line'>authd.proxy.vpxa-nfcssl = "vmware-vpxa:vpxa-nfcssl"
</span><span class='line'>authd.proxy.vpxa-nfc = "vmware-vpxa:vpxa-nfc"
</span><span class='line'>authd.fullpath = "/sbin/authd"
</span><span class='line'>vhv.enable = "true"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ # /etc/init.d/hostd restart
</span><span class='line'>watchdog-hostd: Terminating watchdog process with PID 33855
</span><span class='line'>hostd stopped.
</span><span class='line'>Ramdisk 'hostd' with estimated size of 553MB already exists
</span><span class='line'>hostd started.</span></code></pre></td></tr></table></div></figure>


<p>ネスト化されたVMとしてのESXiをインストールします。この際、ウィザード上は一旦OSの種別でOther Linux(64bit)を選択し、VMの作成が終わった時点で再度OSのタイプを指定します。するとVMware ESXi 5.xが選択できます。こちらを行ってから再びESXiのインストールを行ってください。</p>
]]></content>
  </entry>
  
</feed>
